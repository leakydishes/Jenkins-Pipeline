pipeline {
    agent any
    environment {
        DIRECTORY_PATH = "/Users/teclaire/.jenkins/workspace/my_first_pipeline"
        TESTING_ENVIRONMENT = "test-env"
        STAGING_ENVIRONMENT = "staging-env"
        PRODUCTION_ENVIRONMENT = "my_first_pipeline"
        RECIPIENT_EMAIL = 'te.clairee@gmail.com' // Email
    }
    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        echo "Fetching the source code from the directory path: ${env.DIRECTORY_PATH}"
                        echo "Compiling the code and generating artifacts"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error occurred during the Build stage: ${e.message}")
                    }
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    try {
                        echo "Running unit tests"
                        echo "Running integration tests"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error occurred during the Unit and Integration Tests stage: ${e.message}")
                    }
                }
            }
        }
        // to create a fail for email
        stage('Code Analysis') {
            steps {
                script {
                    echo "Performing code analysis using Static Analysis Utilities plugin"
                    def analysisResults = scanForIssues tool: [$class: 'CheckStyle'], pattern: '**/checkstyle-result.xml'
                    def totalIssues = analysisResults.getTotalSize()
                    echo "Total code analysis issues found: ${totalIssues}"
                    if (totalIssues > 0) {
                        currentBuild.result = 'FAILURE'
                        error("Code analysis found issues")
                    }
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    try {
                        echo "Deploying application to production environment: ${env.PRODUCTION_ENVIRONMENT}"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error occurred during the Deploy to Production stage: ${e.message}")
                    }
                }
            }
            post {
                always {
                    script {
                        emailext subject: "Pipeline ${currentBuild.result}: ${env.JOB_NAME}",
                                  body: "Pipeline ${currentBuild.result}: ${env.BUILD_URL}",
                                  to: env.RECIPIENT_EMAIL, // Email
                                  attachmentsPattern: '**/build.log'
                    }
                }
            }
        }
    }
}
